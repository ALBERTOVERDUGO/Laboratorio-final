name: Workflow
on:
  push:
    branches:
      - feature-Alberto-Verdugo-Ponce-Laboratorio-Final

jobs:        
  SAST:
    runs-on: ubuntu-latest
    steps:

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'


    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'  # Ajusta la versión de Node.js según tus necesidades

    - name: Install dependencies
      run: npm install  # O usa `yarn install` si prefieres yarn

    - name: SonarCloud Scan
      run: |
        npm install -g sonarqube-scanner 
        sonar-scanner \
          -Dsonar.projectKey=ALBERTOVERDUGO_Laboratorio-final \
          -Dsonar.organization=albertoverdugo \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.branch.name=feature-Alberto-Verdugo-Ponce-Laboratorio-Final

#    - name: Check SonarCloud Quality Gate
 #     run: |
  #        PROJECT_KEY=ALBERTOVERDUGO_Laboratorio-final
   #       ORGANIZATION=albertoverdugo
    #      SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
     #     QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/project_branches/list?project=${PROJECT_KEY}" | jq -r '.branches[] | select(.name=="feature-Alberto-Verdugo-Ponce-Laboratorio-Final") | .status.qualityGateStatus')

#          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
 #         echo "Quality gate failed: $QUALITY_GATE_STATUS"
  #        exit 1
   #       else
    #      echo "Quality gate passed: $QUALITY_GATE_STATUS"
     #     fi

#SCA -------------------------------------------

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2      

    - name: Build
      id: build
      run: |
          pwd
          ls -R

          if [ -f "package.json" ]; then
              echo "Utiliza package.json, proyecto Node.js o React"
              echo "Instalando dependencias"
              npm install

          if grep -q '"vite"' package.json; then
             echo "Construyendo proyecto con Vite y TypeScript"
             npm run build  # Este comando ejecutará 'tsc' y 'vite build'

          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
              mkdir -p ${{ github.workspace }}/dist
              
              find dist -type f -exec cp {} ${{ github.workspace }}/dist \;

              echo "Archivos y directorios creados en 'dist/':"
              ls -l ${{ github.workspace }}/dist
          else
              echo "El directorio 'dist/' está vacío o no existe después de construir."
              echo "Contenido actual de 'dist/':"
              ls -l dist  # Mostrar contenido de dist/ si existe pero está vacío
              exit 1  # Terminar el script con error si no hay archivos en dist/
          fi
          else
          echo "El proyecto no utiliza Vite o TypeScript según package.json."
          exit 1  # Terminar el script con error si no se encuentra Vite en package.json
          fi
          else
          echo "Otro tipo de proyecto"
          fi

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
          distribution: 'adopt'
          java-version: '17'  # Ajusta la versión de Java según la compatibilidad con Dependency Check

    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      env:
          JAVA_HOME: /opt/jdk
      with:
          project: 'ALBERTOVERDUGO_Laboratorio-final'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 4.0
            --enableRetired


    - name: Upload Test result
      uses: actions/upload-artifact@v2
      with:
        name: Depcheck report
        path: ${{github.workspace}}/reports

    - name: archivos y directorios
      run: |
           ls -R ${{github.workspace}}
           
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
          name: Laboratorio-final-artifact  # Nombre del artefacto
          path: |
                 **
           

# Docker Build Image ----------------------------------------

  DockerBuild:
    needs: SCA
    runs-on: self-hosted
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
          name: Laboratorio-final-artifact  # Nombre del artefacto que subiste anteriormente
          path: ./downloaded-artifact 

    - name: Build Docker
      run: |
        docker build --tag albertoverdugo/laboratoriodevsecops-test:latest .

    - name: Push Docker
      run: |
        docker push albertoverdugo/laboratoriodevsecops-test:latest


#-------------------- Docker Scan ------------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: | 
        docker pull albertoverdugo/laboratoriodevsecops-test:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'albertoverdugo/laboratoriodevsecops-test:latest'
        format: 'table'

#--------------------- DAST ------------------------------------------------------

 # DAST: 
 #  needs: DockerScan
 #   runs-on: self-hosted
 #   steps:

 #   - name: ZAP Scan
 #     run: |
 #          docker run -p 8095:8095 --name laboratorioDeploy -d albertoverdugo/laboratoriodevsecops-test:latest
        
 #  - name: Sleep
 #   run: |
 #        sleep 500
